import telebot
from telebot import types

from secret import token

from bs4 import BeautifulSoup

from selenium import webdriver
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.firefox.service import Service

from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC

import numpy as np
import pandas as pd
import pymorphy2
import re
import os
import dataframe_image as dfi
import matplotlib
import matplotlib.pyplot as plt
from matplotlib import ticker
import hashlib

from get_posters import get_posters

bot = telebot.TeleBot(token)

user_dict = dict()

try:
    query_hash_dict = np.load(
        'C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\user_data\\dictionaries\\query_hash_dict.npy',
        allow_pickle=True).item()
except:
    query_hash_dict = dict()


class User:
    def __init__(self, name):
        self.name = name
        self.home_region = None
        self.home_region_num = None
        self.home_region_lit = None
        self.search_region = None
        self.search_region_num = None
        self.search_region_lit = None
        self.search_city_eng = None
        self.search_city_rus = None
        self.search_city_lit = None
        self.brand_choice = None
        self.brand_choice_lit = None
        self.model_choice = None
        self.model_choice_lit = None
        self.query = None
        self.query_status = 0
        self.query_count = None
        self.last_queries = []
        self.limit = None


regions_cities_dict = np.load(
    'C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\basic_dictionaries\\regions_cities_dict.npy',
    allow_pickle=True).item()
brands_models_dict = np.load('C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\basic_dictionaries\\brands_models_dict.npy',
                             allow_pickle=True).item()

chrome_options = Options()
chrome_options.add_argument("--headless")
s = Service('C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\driver\\geckodriver.exe')
driver = webdriver.Firefox(options=chrome_options, service=s)


@bot.message_handler(func=lambda message: message.text.strip().lower() == '/start')  # commands=['start']
def send_welcome(message):
    global user_dict
    welcome_text = f'''
    –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}!</b>.
    
    –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å ‚úÖ
    
    –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–∂–º–∏—Ç–µ /help.

    –û–±–æ –º–Ω–µ –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–¥–µ—Å—å - /info.
    '''
    bot.send_message(message.chat.id, welcome_text, parse_mode='html', reply_markup=types.ReplyKeyboardRemove())

    chat_id = message.chat.id

    try:
        user_dict = np.load(
            f'C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\user_data\\dictionaries\\user_dict.npy',
            allow_pickle=True).item()
        user = user_dict.get(chat_id)
        bot.send_message(message.chat.id,
                         f'''
        <b>–ú—ã c –í–∞–º–∏ —É–∂–µ –∑–Ω–∞–∫–æ–º—ã –∏ —è –ø–æ–º–Ω—é –í–∞—à –ø—Ä–æ—à–ª—ã–π –∑–∞–ø—Ä–æ—Å:</b>                                                 
        \n---------------------------------------
        \n<b>–î–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω:</b> {user.home_region_lit}. \n<b>–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:</b> {user.search_region_lit}. \n<b>–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.search_city_rus is None else user.search_city_lit}.\n<b>–ú–∞—Ä–∫–∞:</b> {user.brand_choice_lit}. \n<b>–ú–æ–¥–µ–ª—å:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.model_choice is None else user.model_choice_lit}.
        \n---------------------------------------
        ''', parse_mode='html')

        bot.send_message(message.chat.id, '''
–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å, –≤–≤–µ–¥–∏—Ç–µ /dialog.
–õ–∏–±–æ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É - /posters.
            ''')

    except:
        bot.send_message(message.chat.id, '''
<b>–ú—ã c –í–∞–º–∏ –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã.
–î–∞–≤–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤–∏–º –∑–∞–ø—Ä–æ—Å:</b> /dialog.''',
                         parse_mode='html')
        name = message.from_user.first_name
        user = User(name)
        user_dict[chat_id] = user

    keyboard = types.InlineKeyboardMarkup()
    url_button_location = types.InlineKeyboardButton(text="–†–µ–≥–∏–æ–Ω–æ–≤ –∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤",
                                                     url="https://auto.drom.ru/cities/")
    url_button_cars = types.InlineKeyboardButton(text="–ú–∞—Ä–æ–∫ –∏ –º–æ–¥–µ–ª–µ–π", url="https://www.drom.ru/catalog/")
    keyboard.add(url_button_location)
    keyboard.add(url_button_cars)
    bot.send_message(message.chat.id,
                     '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã (–æ—Å–æ–±–µ–Ω–Ω–æ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑) –∫—Ä–∞–π–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - /info.')
    bot.send_message(message.chat.id, "–ó–¥–µ—Å—å —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–Ω–∞—Ç—ã –¥–ª—è –≤–≤–æ–¥–∞:",
                     reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text.strip().lower() == '/rules')  # commands=['rules']
def send_rules(message):
    text = '''
<b> ‚ùó –ü—Ä–∞–≤–∏–ª–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤:</b>
    
    1) –ù–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –≤–≤–æ–¥—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
    2) –†–µ–≥–∏–æ–Ω—ã –≤–≤–æ–¥—è—Ç—Å—è —Å–æ —Å–ª–æ–≤–∞–º–∏ –æ–±–ª–∞—Å—Ç—å / –∫—Ä–∞–π / —Ä–µ—Å–ø—É–±–ª–∏–∫–∞ / –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥ / –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –æ–±–ª–∞—Å—Ç—å 
    (–∫—Ä–æ–º–µ –ú–æ—Å–∫–≤—ã –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞), —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, —Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω. 
    3) –í –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –¥–µ—Ñ–∏—Å—ã –∏ —Ü–∏—Ñ—Ä—ã (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏), —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, —Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω.
    4) –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–µ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö –ú–æ—Å–∫–≤–∞ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –≤–≤–æ–¥—è—Ç—Å—è –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤–∞ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.

<b> ‚ùó –ü—Ä–∞–≤–∏–ª–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ä–æ–∫ –∏ –º–æ–¥–µ–ª–µ–π:</b>
    
    1) –ù–∞–∑–≤–∞–Ω–∏—è –º–∞—Ä–æ–∫ –∏ –º–æ–¥–µ–ª–µ–π –≤–≤–æ–¥—è—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö.
    2) –í –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –º–∞—Ä–æ–∫ –∏ –º–æ–¥–µ–ª–µ–π –ø—Ä–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏), —Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω.
    '''
    bot.send_message(message.chat.id, text, parse_mode='html')


@bot.message_handler(func=lambda message: message.text.strip().lower() == '/help')  # commands=['help']
def send_help(message):
    bot.send_message(message.chat.id,
                     '''
<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –í–∞–º –∫–æ–º–∞–Ω–¥:</b>

    /start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è

    /rules - –ø—Ä–∞–≤–∏–ª–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

    /help - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

    /info - –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞

    /dialog - —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞

    /posters - –≤—ã–¥–∞—á–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É
''', parse_mode='html')


@bot.message_handler(func=lambda message: message.text.strip().lower() == '/info')  # commands=['info']
def send_info(message):
    bot.send_message(message.chat.id,
                     '''
    <b>Drom_bot</b> - —ç—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç:
    ‚úÖ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∏ —Å–æ–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ Drom.ru
    ‚úÖ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∏ –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∞–≤—Ç–æ)
    ‚úÖ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É
    
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É,
–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è: /start.
–ó–∞—Ç–µ–º –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å: /dialog. 
–ò —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ
–∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è /posters.
–ò–º–µ–Ω–Ω–æ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ –Ω–∏–∫–∞–∫ –∏–Ω–∞—á–µ üëÄ

–ê–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–≤—à–∏—Å—å –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–≤ –∑–∞–ø—Ä–æ—Å, –±–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç
–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –í –±—É–¥—É—â–µ–º –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
–ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –∏–ª–∏ –∂–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å, –ø–æ—Å–º–æ—Ç—Ä–µ–≤ –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç:
–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–≤—à–∏—Å—å –∑–∞–Ω–æ–≤–æ - /start 
–∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—É—Ç–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ - /help
–∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ - /info
''', parse_mode='html')


@bot.message_handler(func=lambda message: message.text.strip().lower() not in (
        '/start', '/rules', '/help', '/info', '/dialog', '/posters'))
def unknown_message(message):
    bot.send_message(message.chat.id,
                     '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: /help.')


@bot.message_handler(
    content_types=['photo', 'sticker', 'pinned_message', 'audio', 'document', 'video', 'voice', 'video_note',
                   'location', 'contact'])
def unknown_media(message):
    bot.send_message(message.chat.id,
                     text='–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: /help.')


@bot.message_handler(func=lambda message: message.text.strip().lower() == '/dialog')  # commands=["dialog"]
def dialog(message):
    global user_dict
    chat_id = message.chat.id
    if user_dict.get(chat_id) is None:
        bot.send_message(message.chat.id, '–í—ã –µ—â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è.')
    elif user_dict.get(chat_id).query_status == 1:
        msg = bot.send_message(message.chat.id,
                               '–í—ã —É–∂–µ —Ä–∞–Ω–µ–µ —Å–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å, –Ω–æ –º—ã –±–µ–∑ –ø—Ä–æ–±–ª–µ–º –µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –¥–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω')

        user = user_dict[chat_id]
        saved_query_count = user.query_count
        saved_last_queries = user.last_queries

        name = message.from_user.first_name
        user = User(name)
        user.query_count = saved_query_count
        user.last_queries = saved_last_queries

        user_dict[chat_id] = user
        bot.register_next_step_handler(msg, home_region_choice_step)
    else:
        msg = bot.send_message(message.chat.id,
                               '–î–∞–≤–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤–∏–º –í–∞—à –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –¥–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω')
        bot.register_next_step_handler(msg, home_region_choice_step)


user_padezh_region = str()


def home_region_choice_step(message):
    global user_padezh_region
    user_home_region = message.text.lower().strip()

    if user_home_region == '/start':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å')
        send_welcome(message)

    elif user_home_region == '/help':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_help(message)
        msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –¥–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω')
        bot.register_next_step_handler(msg, home_region_choice_step)
    elif user_home_region == '/info':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_info(message)
        msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –¥–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω')
        bot.register_next_step_handler(msg, home_region_choice_step)
    elif regions_cities_dict.get(user_home_region) is None:
        msg = bot.reply_to(message, '–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Ä–µ–≥–∏–æ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: –≤–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
        bot.register_next_step_handler(msg, home_region_choice_step)
    else:
        bot.reply_to(message, '–ü—Ä–æ–≤–µ—Ä—è—é –í–∞—à —Ä–µ–≥–∏–æ–Ω –≤ –∏–º–µ—é—â–µ–º—Å—è —É –º–µ–Ω—è —Å–ø–∏—Å–∫–µ.')

        morph = pymorphy2.MorphAnalyzer()

        try:
            if user_home_region.split(' ')[-1] == '–∫—Ä–∞–π':
                user_padezh_region = user_home_region[0].upper() + user_home_region[1:]
            elif user_home_region.split(' ')[-1] == '–æ–±–ª–∞—Å—Ç—å':
                if user_home_region.split(' ')[0] == '–µ–≤—Ä–µ–π—Å–∫–∞—è':
                    padezh_region = morph.parse(user_home_region.split(' ')[0])[0].inflect({'accs'}).word + ' ' + \
                                    morph.parse(user_home_region.split(' ')[1])[0].inflect({'accs'}).word + ' ' + \
                                    user_home_region.split(' ')[2]
                    user_padezh_region = padezh_region[0].upper() + padezh_region[1:]
                else:
                    padezh_region = morph.parse(user_home_region.split(' ')[0])[0].inflect({'accs'}).word + ' ' + \
                                    user_home_region.split(' ')[1]
                    user_padezh_region = padezh_region[0].upper() + padezh_region[1:]
            elif user_home_region.split(' ')[-1] == '–æ–∫—Ä—É–≥':
                if user_home_region.split(' ')[0] == '—Ö–∞–Ω—Ç—ã-–º–∞–Ω—Å–∏–π—Å–∫–∏–π' or user_home_region.split(' ')[
                    0] == '—è–º–∞–ª–æ-–Ω–µ–Ω–µ—Ü–∫–∏–π':
                    user_padezh_region = user_home_region.split('-')[0][0].upper() + user_home_region.split('-')[0][
                                                                                     1:] + '-' + \
                                         user_home_region.split('-')[1][0].upper() + \
                                         user_home_region.split('-')[1][1:]
                else:
                    user_padezh_region = user_home_region[0].upper() + user_home_region[1:]
            elif user_home_region.split(' ')[0] == '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞':
                if len(user_home_region.split(' ')) == 2:
                    padezh_region = morph.parse(user_home_region.split(' ')[0])[0].inflect({'accs'}).word + ' ' + \
                                    user_home_region.split(' ')[1]
                    user_padezh_region = padezh_region.title()
                else:
                    padezh_region = morph.parse(user_home_region.split(' ')[0])[0].inflect({'accs'}).word + ' ' + \
                                    user_home_region.split(' ')[1] + ' ' + user_home_region.split(' ')[2]
                    user_padezh_region = padezh_region.title()
            else:
                padezh_region = morph.parse(user_home_region.split(' ')[0])[0].inflect({'accs'}).word + ' ' + \
                                morph.parse(user_home_region.split(' ')[1])[
                                    0].inflect({'accs'}).word
                user_padezh_region = padezh_region.title()
        except:
            user_padezh_region = morph.parse(user_home_region)[0].inflect({'accs'}).word.title()

        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —è –ø–æ—Å—Ç–∞–≤–∏–ª {} –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–æ–º–∞—à–Ω–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞. '
                                          '–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä –Ω–∞–ª–æ–≥–∞ –Ω–∞ –∞–≤—Ç–æ –≤ –í–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ.'
                         .format(user_padezh_region))

        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.home_region = user_home_region
        user.home_region_num = regions_cities_dict.get(user_home_region)[0]
        user.home_region_lit = regions_cities_dict.get(user_home_region)[1]

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–ü–æ —Ü–µ–ª–æ–º—É —Ä–µ–≥–∏–æ–Ω—É', '–ü–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É')

        msg = bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –≤–∏–¥ –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(msg, locality_choice_step)


def locality_choice_step(message):
    locality_choice = message.text
    if locality_choice == '/start':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å', reply_markup=types.ReplyKeyboardRemove())
        send_welcome(message)
    elif locality_choice == '/help':
        bot.send_message(message.chat.id, '–ü—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ', reply_markup=types.ReplyKeyboardRemove())
        send_help(message)
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–ü–æ —Ü–µ–ª–æ–º—É —Ä–µ–≥–∏–æ–Ω—É', '–ü–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É')
        msg = bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –≤–∏–¥ –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(msg, locality_choice_step)
    elif locality_choice == '/info':
        bot.send_message(message.chat.id, '–ü—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ', reply_markup=types.ReplyKeyboardRemove())
        send_info(message)
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–ü–æ —Ü–µ–ª–æ–º—É —Ä–µ–≥–∏–æ–Ω—É', '–ü–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É')
        msg = bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –≤–∏–¥ –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(msg, locality_choice_step)

    elif locality_choice == '–ü–æ —Ü–µ–ª–æ–º—É —Ä–µ–≥–∏–æ–Ω—É':
        bot.reply_to(message, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ —Ü–µ–ª–æ–º—É —Ä–µ–≥–∏–æ–Ω—É', reply_markup=types.ReplyKeyboardRemove())
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–ü–æ –º–æ–µ–º—É –¥–æ–º–∞—à–Ω–µ–Ω–º—É —Ä–µ–≥–∏–æ–Ω—É', '–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π')
        msg = bot.send_message(message.chat.id, '–ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–æ –í–∞—à–µ–º—É –¥–æ–º–∞—à–Ω–µ–º—É —Ä–µ–≥–∏–æ–Ω—É –∏–ª–∏ –≤—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π?',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, region_search_choice_step)
    elif locality_choice == '–ü–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É':
        bot.reply_to(message, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É',
                     reply_markup=types.ReplyKeyboardRemove())
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–í –º–æ–µ–º –¥–æ–º–∞—à–Ω–µ–º —Ä–µ–≥–∏–æ–Ω–µ', '–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π')
        msg = bot.send_message(message.chat.id,
                               '–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –í–∞—à–µ–º –¥–æ–º–∞—à–Ω–µ–º —Ä–µ–≥–∏–æ–Ω–µ –∏–ª–∏ –≤—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π?',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, city_search_choice_step)
    else:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–ü–æ —Ü–µ–ª–æ–º—É —Ä–µ–≥–∏–æ–Ω—É', "–ü–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É")
        msg = bot.send_message(message.chat.id, '–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏, –∫–∞–∫–æ–π –≤–∏–¥ –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å.',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, locality_choice_step)


def region_search_choice_step(message):
    region_choice = message.text
    if region_choice == '/start':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å', reply_markup=types.ReplyKeyboardRemove())
        send_welcome(message)

    elif region_choice == '/help':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ', reply_markup=types.ReplyKeyboardRemove())
        send_help(message)
        bot.send_message(message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ —Ü–µ–ª–æ–º—É —Ä–µ–≥–∏–æ–Ω—É')
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–ü–æ –º–æ–µ–º—É –¥–æ–º–∞—à–Ω–µ–Ω–º—É —Ä–µ–≥–∏–æ–Ω—É', '–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π')
        msg = bot.send_message(message.chat.id, '–ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–æ –í–∞—à–µ–º—É –¥–æ–º–∞—à–Ω–µ–º—É —Ä–µ–≥–∏–æ–Ω—É –∏–ª–∏ –≤—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π?',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, region_search_choice_step)
    elif region_choice == '/info':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ', reply_markup=types.ReplyKeyboardRemove())
        send_info(message)
        bot.send_message(message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ —Ü–µ–ª–æ–º—É —Ä–µ–≥–∏–æ–Ω—É')
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–ü–æ –º–æ–µ–º—É –¥–æ–º–∞—à–Ω–µ–Ω–º—É —Ä–µ–≥–∏–æ–Ω—É', '–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π')
        msg = bot.send_message(message.chat.id, '–ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–æ –í–∞—à–µ–º—É –¥–æ–º–∞—à–Ω–µ–º—É —Ä–µ–≥–∏–æ–Ω—É –∏–ª–∏ –≤—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π?',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, region_search_choice_step)

    elif region_choice == '–ü–æ –º–æ–µ–º—É –¥–æ–º–∞—à–Ω–µ–Ω–º—É —Ä–µ–≥–∏–æ–Ω—É':
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.search_region = user.home_region
        user.search_region_num = user.home_region_num
        user.search_region_lit = user.home_region_lit
        query = 'auto.drom.ru/region{}/'.format(user.search_region_num)
        user.query = query
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –æ—Å—É—â–µ—Å—Ç–≤–∏–º –ø–æ–∏—Å–∫ –∞–≤—Ç–æ –ø–æ –í–∞—à–µ–º—É –¥–æ–º–∞—à–Ω–µ–º—É —Ä–µ–≥–∏–æ–Ω—É',
                         reply_markup=types.ReplyKeyboardRemove())

        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏')
        bot.register_next_step_handler(msg, brand_choice_step)

    elif region_choice == '–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π':
        msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ.',
                               reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, region_search_choice_step_2)

    else:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–ü–æ –º–æ–µ–º—É –¥–æ–º–∞—à–Ω–µ–Ω–º—É —Ä–µ–≥–∏–æ–Ω—É', '–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π')
        msg = bot.send_message(message.chat.id, '–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏, –∫–∞–∫–æ–π –≤–∏–¥ –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤—è—Ç—å.',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, region_search_choice_step)


def region_search_choice_step_2(message):
    user_search_region = message.text.lower().strip()

    if user_search_region == '/start':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å')
        send_welcome(message)

    elif user_search_region == '/help':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_help(message)
        msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ.')
        bot.register_next_step_handler(msg, region_search_choice_step_2)
    elif user_search_region == '/info':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_info(message)
        msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ.')
        bot.register_next_step_handler(msg, region_search_choice_step_2)

    elif regions_cities_dict.get(user_search_region) is None:
        msg = bot.reply_to(message,
                           '–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Ä–µ–≥–∏–æ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: –≤–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
        bot.register_next_step_handler(msg, region_search_choice_step_2)

    else:
        bot.reply_to(message, '–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –≤ –∏–º–µ—é—â–µ–º—Å—è —É –º–µ–Ω—è —Å–ø–∏—Å–∫–µ.')

        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.search_region = user_search_region
        user.search_region_num = regions_cities_dict.get(user_search_region)[0]
        user.search_region_lit = regions_cities_dict.get(user_search_region)[1]
        query = 'auto.drom.ru/region{}/'.format(user.search_region_num)
        user.query = query
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –æ—Å—É—â–µ—Å—Ç–≤–∏–º –ø–æ–∏—Å–∫ –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ä–µ–≥–∏–æ–Ω—É')

        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏')
        bot.register_next_step_handler(msg, brand_choice_step)


def city_search_choice_step(message):
    city_choice = message.text

    if city_choice == '/start':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å', reply_markup=types.ReplyKeyboardRemove())
        send_welcome(message)

    elif city_choice == '/help':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ', reply_markup=types.ReplyKeyboardRemove())
        send_help(message)
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–í –º–æ–µ–º –¥–æ–º–∞—à–Ω–µ–º —Ä–µ–≥–∏–æ–Ω–µ', '–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π')
        msg = bot.send_message(message.chat.id,
                               '–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –í–∞—à–µ–º –¥–æ–º–∞—à–Ω–µ–º —Ä–µ–≥–∏–æ–Ω–µ –∏–ª–∏ –≤—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π?',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, city_search_choice_step)
    elif city_choice == '/info':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ', reply_markup=types.ReplyKeyboardRemove())
        send_info(message)
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–í –º–æ–µ–º –¥–æ–º–∞—à–Ω–µ–º —Ä–µ–≥–∏–æ–Ω–µ', '–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π')
        msg = bot.send_message(message.chat.id,
                               '–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –í–∞—à–µ–º –¥–æ–º–∞—à–Ω–µ–º —Ä–µ–≥–∏–æ–Ω–µ –∏–ª–∏ –≤—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π?',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, city_search_choice_step)

    elif city_choice == '–í –º–æ–µ–º –¥–æ–º–∞—à–Ω–µ–º —Ä–µ–≥–∏–æ–Ω–µ':

        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.search_region = user.home_region
        user.search_region_num = user.home_region_num
        user.search_region_lit = user.home_region_lit

        msg = bot.send_message(message.chat.id,
                               '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ.',
                               reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, city_search_choice_step_3)

    elif city_choice == '–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π':
        msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ.',
                               reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, city_search_choice_step_2)

    else:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–í –º–æ–µ–º –¥–æ–º–∞—à–Ω–µ–º —Ä–µ–≥–∏–æ–Ω–µ', '–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π')
        msg = bot.send_message(message.chat.id, '–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏, –∫–∞–∫–æ–π –≤–∏–¥ –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤—è—Ç—å.',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, city_search_choice_step)


def city_search_choice_step_2(message):
    user_search_region = message.text.lower().strip()

    if user_search_region == '/start':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å')
        send_welcome(message)

    elif user_search_region == '/help':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_help(message)
        msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ.')
        bot.register_next_step_handler(msg, city_search_choice_step_2)
    elif user_search_region == '/info':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_info(message)
        msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ.')
        bot.register_next_step_handler(msg, city_search_choice_step_2)

    elif regions_cities_dict.get(user_search_region) is None:
        msg = bot.reply_to(message,
                           '–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Ä–µ–≥–∏–æ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: –≤–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
        bot.register_next_step_handler(msg, city_search_choice_step_2)

    else:
        bot.reply_to(message, '–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –≤ –∏–º–µ—é—â–µ–º—Å—è —É –º–µ–Ω—è —Å–ø–∏—Å–∫–µ.')

        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.search_region = user_search_region
        user.search_region_num = regions_cities_dict.get(user_search_region)[0]
        user.search_region_lit = regions_cities_dict.get(user_search_region)[1]

        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –æ—Å—É—â–µ—Å—Ç–≤–∏–º –ø–æ–∏—Å–∫ –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ä–µ–≥–∏–æ–Ω—É')

        msg = bot.send_message(message.chat.id,
                               '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ.')
        bot.register_next_step_handler(msg, city_search_choice_step_3)


def city_search_choice_step_3(message):
    user_search_city_rus = message.text.lower().strip()
    chat_id = message.chat.id
    user = user_dict[chat_id]

    if user_search_city_rus == '/start':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å')
        send_welcome(message)

    elif user_search_city_rus == '/help':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_help(message)
        msg = bot.send_message(message.chat.id,
                               '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ.')
        bot.register_next_step_handler(msg, city_search_choice_step_3)

    elif user_search_city_rus == '/info':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_info(message)
        msg = bot.send_message(message.chat.id,
                               '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ.')
        bot.register_next_step_handler(msg, city_search_choice_step_3)

    elif regions_cities_dict.get(user.search_region)[2].get(user_search_city_rus) is None:
        msg = bot.reply_to(message,
                           '–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: –≤–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
        bot.register_next_step_handler(msg, city_search_choice_step_3)
        return
    else:
        search_city_eng = regions_cities_dict.get(user.search_region)[2].get(user_search_city_rus)[0]
        user.search_city_eng = search_city_eng
        user.search_city_rus = user_search_city_rus
        user.search_city_lit = regions_cities_dict.get(user.search_region)[2].get(user_search_city_rus)[1]

        query = '{}.drom.ru/'.format(user.search_city_eng)
        user.query = query
        bot.send_message(message.chat.id,
                         '–•–æ—Ä–æ—à–æ, –æ—Å—É—â–µ—Å—Ç–≤–∏–º –ø–æ–∏—Å–∫ –∞–≤—Ç–æ –≤ –¥–∞–Ω–Ω–æ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω—Ç–∫–µ')

        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏')
        bot.register_next_step_handler(msg, brand_choice_step)


def brand_choice_step(message):
    brand_choice = message.text.lower().strip()

    if brand_choice == '/start':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å')
        send_welcome(message)

    elif brand_choice == '/help':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_help(message)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏')
        bot.register_next_step_handler(msg, brand_choice_step)

    elif brand_choice == '/info':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_info(message)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏')
        bot.register_next_step_handler(msg, brand_choice_step)

    elif brands_models_dict.get(brand_choice) is None:
        msg = bot.reply_to(message,
                           '–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: –≤–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
        bot.register_next_step_handler(msg, brand_choice_step)
        return
    else:
        bot.reply_to(message, '–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—É—é –º–∞—Ä–∫—É –∞–≤—Ç–æ –≤ –∏–º–µ—é—â–µ–º—Å—è —É –º–µ–Ω—è —Å–ø–∏—Å–∫–µ.')

        chat_id = message.chat.id
        user = user_dict[chat_id]

        user.brand_choice = brands_models_dict.get(brand_choice)[0]
        user.brand_choice_lit = brands_models_dict.get(brand_choice)[1]

        user.query = user.query + user.brand_choice + '/'
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –æ—Å—É—â–µ—Å—Ç–≤–∏–º –ø–æ–∏—Å–∫ –ø–æ –¥–∞–Ω–Ω–æ–π –º–∞—Ä–∫–µ')

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–¢–æ–ª—å–∫–æ –ø–æ –º–∞—Ä–∫–µ', '–ü–æ –º–∞—Ä–∫–µ –∏ –º–æ–¥–µ–ª–∏')
        msg = bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –≤–∏–¥ –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(msg, model_choice_step)


def model_choice_step(message):
    model_search = message.text
    chat_id = message.chat.id
    user = user_dict[chat_id]

    if model_search == '/start':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å', reply_markup=types.ReplyKeyboardRemove())
        send_welcome(message)

    elif model_search == '/help':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ', reply_markup=types.ReplyKeyboardRemove())
        send_help(message)
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–¢–æ–ª—å–∫–æ –ø–æ –º–∞—Ä–∫–µ', '–ü–æ –º–∞—Ä–∫–µ –∏ –º–æ–¥–µ–ª–∏')
        msg = bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –≤–∏–¥ –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(msg, model_choice_step)

    elif model_search == '/info':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ', reply_markup=types.ReplyKeyboardRemove())
        send_info(message)
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–¢–æ–ª—å–∫–æ –ø–æ –º–∞—Ä–∫–µ', '–ü–æ –º–∞—Ä–∫–µ –∏ –º–æ–¥–µ–ª–∏')
        msg = bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –≤–∏–¥ –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(msg, model_choice_step)

    elif model_search == '–¢–æ–ª—å–∫–æ –ø–æ –º–∞—Ä–∫–µ':

        bot.send_message(message.chat.id,
                         '–•–æ—Ä–æ—à–æ, –æ—Å—É—â–µ—Å—Ç–≤–∏–º –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –º–∞—Ä–∫–µ',
                         reply_markup=types.ReplyKeyboardRemove())

        bot.send_message(message.chat.id,
                         f'''
                         <b>–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
                         \n---------------------------------------
                         \n<b>–î–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω:</b> {user.home_region_lit}. \n<b>–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:</b> {user.search_region_lit}. \n<b>–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.search_city_rus is None else user.search_city_lit}.\n<b>–ú–∞—Ä–∫–∞:</b> {user.brand_choice_lit}. \n<b>–ú–æ–¥–µ–ª—å:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.model_choice is None else user.model_choice_lit}.
                         ''',
                         parse_mode='html')

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–î–∞', '–ù–µ—Ç')
        msg = bot.send_message(message.chat.id, '–í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?', reply_markup=markup)
        bot.register_next_step_handler(msg, make_query_step)

    elif model_search == '–ü–æ –º–∞—Ä–∫–µ –∏ –º–æ–¥–µ–ª–∏':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –æ—Å—É—â–µ—Å—Ç–≤–∏–º –ø–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ –∏ –º–æ–¥–µ–ª–∏',
                         reply_markup=types.ReplyKeyboardRemove())
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏')
        bot.register_next_step_handler(msg, model_choice_step_2)

    else:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–¢–æ–ª—å–∫–æ –ø–æ –º–∞—Ä–∫–µ', '–ü–æ –º–∞—Ä–∫–µ –∏ –º–æ–¥–µ–ª–∏')

        msg = bot.send_message(message.chat.id, '–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏, –∫–∞–∫–æ–π –≤–∏–¥ –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å?',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, model_choice_step)


def model_choice_step_2(message):
    model_choice = message.text.lower().strip()

    chat_id = message.chat.id
    user = user_dict[chat_id]

    if model_choice == '/start':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å')
        send_welcome(message)

    elif model_choice == '/help':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_help(message)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏')
        bot.register_next_step_handler(msg, model_choice_step_2)

    elif model_choice == '/info':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_info(message)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏')
        bot.register_next_step_handler(msg, model_choice_step_2)

    elif brands_models_dict.get(user.brand_choice)[2].get(model_choice) is None:
        msg = bot.reply_to(message,
                           '–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: –≤–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
        bot.register_next_step_handler(msg, model_choice_step_2)
        return
    else:
        bot.reply_to(message, '–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∞–≤—Ç–æ –≤ –∏–º–µ—é—â–µ–º—Å—è —É –º–µ–Ω—è —Å–ø–∏—Å–∫–µ.')

        user.model_choice = brands_models_dict.get(user.brand_choice)[2].get(model_choice)[0]
        user.model_choice_lit = brands_models_dict.get(user.brand_choice)[2].get(model_choice)[1]

        user.query = user.query + user.model_choice + '/'
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –æ—Å—É—â–µ—Å—Ç–≤–∏–º –ø–æ–∏—Å–∫ –ø–æ –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏')

        bot.send_message(message.chat.id,
                         f'''
                         <b>–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
                         \n---------------------------------------
                         \n<b>–î–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω:</b> {user.home_region_lit}. \n<b>–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:</b> {user.search_region_lit}. \n<b>–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.search_city_rus is None else user.search_city_lit}.\n<b>–ú–∞—Ä–∫–∞:</b> {user.brand_choice_lit}. \n<b>–ú–æ–¥–µ–ª—å:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.model_choice is None else user.model_choice_lit}.
                         ''',
                         parse_mode='html')

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–î–∞', '–ù–µ—Ç')
        msg = bot.send_message(message.chat.id, '–í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?', reply_markup=markup)
        bot.register_next_step_handler(msg, make_query_step)


def make_query_step(message):
    chat_id = message.chat.id

    user = user_dict[chat_id]

    query_choice = message.text

    if query_choice == '/start':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å', reply_markup=types.ReplyKeyboardRemove())
        send_welcome(message)

    elif query_choice == '/help':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ', reply_markup=types.ReplyKeyboardRemove())
        send_help(message)

        bot.send_message(message.chat.id,
                         f'''
                         <b>–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
                         \n---------------------------------------
                         \n<b>–î–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω:</b> {user.home_region_lit}. \n<b>–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:</b> {user.search_region_lit}. \n<b>–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.search_city_rus is None else user.search_city_lit}.\n<b>–ú–∞—Ä–∫–∞:</b> {user.brand_choice_lit}. \n<b>–ú–æ–¥–µ–ª—å:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.model_choice is None else user.model_choice_lit}.
                         ''',
                         parse_mode='html')

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–î–∞', '–ù–µ—Ç')
        msg = bot.send_message(message.chat.id, '–í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?', reply_markup=markup)
        bot.register_next_step_handler(msg, make_query_step)

    elif query_choice == '/info':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ', reply_markup=types.ReplyKeyboardRemove())
        send_info(message)

        bot.send_message(message.chat.id,
                         f'''
                         <b>–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
                         \n---------------------------------------
                         \n<b>–î–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω:</b> {user.home_region_lit}. \n<b>–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:</b> {user.search_region_lit}. \n<b>–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.search_city_rus is None else user.search_city_lit}.\n<b>–ú–∞—Ä–∫–∞:</b> {user.brand_choice_lit}. \n<b>–ú–æ–¥–µ–ª—å:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.model_choice is None else user.model_choice_lit}.
                         ''',
                         parse_mode='html')

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–î–∞', '–ù–µ—Ç')
        msg = bot.send_message(message.chat.id, '–í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?', reply_markup=markup)
        bot.register_next_step_handler(msg, make_query_step)

    elif query_choice == '–î–∞':
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –º—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞.'.format(user.query),
                         reply_markup=types.ReplyKeyboardRemove())
        user.query = 'https://' + user.query
        user.query_status = 1

        user.query_count = user.last_queries.count(user.query)

        np.save(f'C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\user_data\\dictionaries\\user_dict.npy',
                user_dict)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ /posters, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –Ω–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'.format(user.query))

    elif query_choice == '–ù–µ—Ç':
        bot.send_message(message.chat.id, '–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ', reply_markup=types.ReplyKeyboardRemove())

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–í –¥–æ–º–∞—à–Ω–µ–º —Ä–µ–≥–∏–æ–Ω–µ', '–í —Ä–µ–≥–∏–æ–Ω–µ –ø–æ–∏—Å–∫–∞', '–í –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ', '–í –º–∞—Ä–∫–µ', '–í –º–æ–¥–µ–ª–∏')

        msg = bot.send_message(message.chat.id, '–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—à–∏–±–∫–∞?', reply_markup=markup)
        bot.register_next_step_handler(msg, remarks_step)

    else:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–î–∞', '–ù–µ—Ç')
        msg = bot.send_message(message.chat.id, '–í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö. –í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, make_query_step)


def remarks_step(message):
    bot.send_message(message.chat.id, '–î–∞–≤–∞–π—Ç–µ —É—Å—Ç—Ä–∞–Ω–∏–º –æ—à–∏–±–∫—É!', reply_markup=types.ReplyKeyboardRemove())
    remark_choice = message.text

    if remark_choice == '/start':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å', reply_markup=types.ReplyKeyboardRemove())
        send_welcome(message)
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–í –¥–æ–º–∞—à–Ω–µ–º —Ä–µ–≥–∏–æ–Ω–µ', '–í —Ä–µ–≥–∏–æ–Ω–µ –ø–æ–∏—Å–∫–∞', '–í –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ', '–í –º–∞—Ä–∫–µ', '–í –º–æ–¥–µ–ª–∏')
        msg = bot.send_message(message.chat.id, '–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—à–∏–±–∫–∞?', reply_markup=markup)
        bot.register_next_step_handler(msg, remarks_step)

    elif remark_choice == '/help':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ', reply_markup=types.ReplyKeyboardRemove())
        send_help(message)
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–í –¥–æ–º–∞—à–Ω–µ–º —Ä–µ–≥–∏–æ–Ω–µ', '–í —Ä–µ–≥–∏–æ–Ω–µ –ø–æ–∏—Å–∫–∞', '–í –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ', '–í –º–∞—Ä–∫–µ', '–í –º–æ–¥–µ–ª–∏')
        msg = bot.send_message(message.chat.id, '–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—à–∏–±–∫–∞?', reply_markup=markup)
        bot.register_next_step_handler(msg, remarks_step)

    elif remark_choice == '/info':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ', reply_markup=types.ReplyKeyboardRemove())
        send_info(message)
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–í –¥–æ–º–∞—à–Ω–µ–º —Ä–µ–≥–∏–æ–Ω–µ', '–í —Ä–µ–≥–∏–æ–Ω–µ –ø–æ–∏—Å–∫–∞', '–í –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ', '–í –º–∞—Ä–∫–µ', '–í –º–æ–¥–µ–ª–∏')
        msg = bot.send_message(message.chat.id, '–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—à–∏–±–∫–∞?', reply_markup=markup)
        bot.register_next_step_handler(msg, remarks_step)

    elif remark_choice == '–í –¥–æ–º–∞—à–Ω–µ–º —Ä–µ–≥–∏–æ–Ω–µ':
        msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –¥–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω',
                               reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, home_region_choice_step_remark)

    elif remark_choice == '–í —Ä–µ–≥–∏–æ–Ω–µ –ø–æ–∏—Å–∫–∞':
        msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ.',
                               reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, region_search_choice_step_remark)

    elif remark_choice == '–í –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ':
        msg = bot.send_message(message.chat.id,
                               '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ.'
                               ' –û–Ω –¥–æ–ª–∂–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–µ–≥–∏–æ–Ω–µ –ø–æ–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑–∞–ª–∏ —Ä–∞–Ω–µ–µ.',
                               reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, city_search_choice_step_remark)

    elif remark_choice == '–í –º–∞—Ä–∫–µ':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏',
                               reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, brand_choice_step_remark)

    elif remark_choice == '–í –º–æ–¥–µ–ª–∏':
        msg = bot.send_message(message.chat.id,
                               '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –º–æ–µ–¥–ª—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–∞–Ω–µ–µ –º–∞—Ä–∫–µ!',
                               reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, model_choice_step_remark)

    else:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–í –¥–æ–º–∞—à–Ω–µ–º —Ä–µ–≥–∏–æ–Ω–µ', '–í —Ä–µ–≥–∏–æ–Ω–µ –ø–æ–∏—Å–∫–∞', '–í –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ', '–í –º–∞—Ä–∫–µ', '–í –º–æ–¥–µ–ª–∏')

        msg = bot.send_message(message.chat.id, '–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—à–∏–±–∫–∞?', reply_markup=markup)
        bot.register_next_step_handler(msg, remarks_step)


def home_region_choice_step_remark(message):
    user_home_region = message.text.lower().strip()
    global user_padezh_region

    if user_home_region == '/start':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å')
        send_welcome(message)

    elif user_home_region == '/help':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_help(message)
        msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –¥–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω')
        bot.register_next_step_handler(msg, home_region_choice_step_remark)

    elif user_home_region == '/info':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_info(message)
        msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –¥–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω')
        bot.register_next_step_handler(msg, home_region_choice_step_remark)

    elif regions_cities_dict.get(user_home_region) is None:
        msg = bot.reply_to(message, '–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Ä–µ–≥–∏–æ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: –≤–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
        bot.register_next_step_handler(msg, home_region_choice_step_remark)
        return
    else:
        bot.reply_to(message, '–ü—Ä–æ–≤–µ—Ä—è—é –í–∞—à —Ä–µ–≥–∏–æ–Ω –≤ –∏–º–µ—é—â–µ–º—Å—è —É –º–µ–Ω—è —Å–ø–∏—Å–∫–µ.')

        morph = pymorphy2.MorphAnalyzer()

        try:
            if user_home_region.split(' ')[-1] == '–∫—Ä–∞–π':
                user_padezh_region = user_home_region[0].upper() + user_home_region[1:]
            elif user_home_region.split(' ')[-1] == '–æ–±–ª–∞—Å—Ç—å':
                if user_home_region.split(' ')[0] == '–µ–≤—Ä–µ–π—Å–∫–∞—è':
                    padezh_region = morph.parse(user_home_region.split(' ')[0])[0].inflect({'accs'}).word + ' ' + \
                                    morph.parse(user_home_region.split(' ')[1])[0].inflect({'accs'}).word + ' ' + \
                                    user_home_region.split(' ')[2]
                    user_padezh_region = padezh_region[0].upper() + padezh_region[1:]
                else:
                    padezh_region = morph.parse(user_home_region.split(' ')[0])[0].inflect({'accs'}).word + ' ' + \
                                    user_home_region.split(' ')[1]
                    user_padezh_region = padezh_region[0].upper() + padezh_region[1:]
            elif user_home_region.split(' ')[-1] == '–æ–∫—Ä—É–≥':
                if user_home_region.split(' ')[0] == '—Ö–∞–Ω—Ç—ã-–º–∞–Ω—Å–∏–π—Å–∫–∏–π' or user_home_region.split(' ')[
                    0] == '—è–º–∞–ª–æ-–Ω–µ–Ω–µ—Ü–∫–∏–π':
                    user_padezh_region = user_home_region.split('-')[0][0].upper() + user_home_region.split('-')[0][
                                                                                     1:] + '-' + \
                                         user_home_region.split('-')[1][0].upper() + \
                                         user_home_region.split('-')[1][1:]
                else:
                    user_padezh_region = user_home_region[0].upper() + user_home_region[1:]
            elif user_home_region.split(' ')[0] == '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞':
                if len(user_home_region.split(' ')) == 2:
                    padezh_region = morph.parse(user_home_region.split(' ')[0])[0].inflect({'accs'}).word + ' ' + \
                                    user_home_region.split(' ')[1]
                    user_padezh_region = padezh_region.title()
                else:
                    padezh_region = morph.parse(user_home_region.split(' ')[0])[0].inflect({'accs'}).word + ' ' + \
                                    user_home_region.split(' ')[1] + ' ' + user_home_region.split(' ')[2]
                    user_padezh_region = padezh_region.title()
            else:
                padezh_region = morph.parse(user_home_region.split(' ')[0])[0].inflect({'accs'}).word + ' ' + \
                                morph.parse(user_home_region.split(' ')[1])[
                                    0].inflect({'accs'}).word
                user_padezh_region = padezh_region.title()
        except:
            user_padezh_region = morph.parse(user_home_region)[0].inflect({'accs'}).word.title()

        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —è –ø–æ—Å—Ç–∞–≤–∏–ª {} –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–æ–º–∞—à–Ω–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞. '
                                          '–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä –Ω–∞–ª–æ–≥–∞ –Ω–∞ –∞–≤—Ç–æ –≤ –í–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ.'
                         .format(user_padezh_region))

        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.home_region = user_home_region
        user.home_region_num = regions_cities_dict.get(user_home_region)[0]
        user.home_region_lit = regions_cities_dict.get(user_home_region)[1]

        bot.send_message(message.chat.id,
                         f'''
                         <b>–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
                         \n---------------------------------------
                         \n<b>–î–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω:</b> {user.home_region_lit}. \n<b>–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:</b> {user.search_region_lit}. \n<b>–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.search_city_rus is None else user.search_city_lit}.\n<b>–ú–∞—Ä–∫–∞:</b> {user.brand_choice_lit}. \n<b>–ú–æ–¥–µ–ª—å:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.model_choice is None else user.model_choice_lit}.
                         ''', parse_mode='html')

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–î–∞', '–ù–µ—Ç')
        msg = bot.send_message(message.chat.id, '–í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?', reply_markup=markup)
        bot.register_next_step_handler(msg, make_query_step)


def region_search_choice_step_remark(message):
    user_search_region = message.text.lower().strip()
    chat_id = message.chat.id
    user = user_dict[chat_id]

    if user_search_region == '/start':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å')
        send_welcome(message)

    elif user_search_region == '/help':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_help(message)
        msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ.')
        bot.register_next_step_handler(msg, region_search_choice_step_remark)

    elif user_search_region == '/info':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_info(message)
        msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ.')
        bot.register_next_step_handler(msg, region_search_choice_step_remark)

    elif regions_cities_dict.get(user_search_region) is None:
        msg = bot.reply_to(message,
                           '–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Ä–µ–≥–∏–æ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: –≤–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
        bot.register_next_step_handler(msg, region_search_choice_step_remark)
        return
    else:
        bot.reply_to(message, '–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –≤ –∏–º–µ—é—â–µ–º—Å—è —É –º–µ–Ω—è —Å–ø–∏—Å–∫–µ.')
        user.search_region = user_search_region
        user.search_region_num = regions_cities_dict.get(user_search_region)[0]
        user.search_region_lit = regions_cities_dict.get(user_search_region)[1]

        if user.model_choice is None:
            query = 'auto.drom.ru/region{}/{}/'.format(user.search_region_num, user.brand_choice)
        else:
            query = 'auto.drom.ru/region{}/{}/{}/'.format(user.search_region_num, user.brand_choice, user.model_choice)
        user.query = query
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –æ—Å—É—â–µ—Å—Ç–≤–∏–º –ø–æ–∏—Å–∫ –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ä–µ–≥–∏–æ–Ω—É.')

    if user.search_city_rus is not None:

        bot.send_message(message.chat.id, '–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞, '
                                          '–ø–æ—ç—Ç–æ–º—É —Å–µ–π—á–∞—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.')

        msg = bot.send_message(message.chat.id,
                               '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ.',
                               reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, city_search_choice_step_remark)

    else:
        bot.send_message(message.chat.id,
                         f'''
                         <b>–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
                         \n---------------------------------------
                         \n<b>–î–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω:</b> {user.home_region_lit}. \n<b>–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:</b> {user.search_region_lit}. \n<b>–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.search_city_rus is None else user.search_city_lit}.\n<b>–ú–∞—Ä–∫–∞:</b> {user.brand_choice_lit}. \n<b>–ú–æ–¥–µ–ª—å:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.model_choice is None else user.model_choice_lit}.
                         ''',
                         parse_mode='html')

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–î–∞', '–ù–µ—Ç')
        msg = bot.send_message(message.chat.id, '–í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?', reply_markup=markup)
        bot.register_next_step_handler(msg, make_query_step)


def city_search_choice_step_remark(message):
    user_search_city_rus = message.text.lower().strip()
    chat_id = message.chat.id
    user = user_dict[chat_id]

    if user_search_city_rus == '/start':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å')
        send_welcome(message)

    elif user_search_city_rus == '/help':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_help(message)
        msg = bot.send_message(message.chat.id,
                               '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ.'
                               ' –û–Ω –¥–æ–ª–∂–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–µ–≥–∏–æ–Ω–µ –ø–æ–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑–∞–ª–∏ —Ä–∞–Ω–µ–µ.')
        bot.register_next_step_handler(msg, city_search_choice_step_remark)

    elif user_search_city_rus == '/info':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_info(message)
        msg = bot.send_message(message.chat.id,
                               '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ.'
                               ' –û–Ω –¥–æ–ª–∂–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–µ–≥–∏–æ–Ω–µ –ø–æ–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑–∞–ª–∏ —Ä–∞–Ω–µ–µ.')
        bot.register_next_step_handler(msg, city_search_choice_step_remark)

    elif regions_cities_dict.get(user.search_region)[2].get(user_search_city_rus) is None:
        msg = bot.reply_to(message,
                           '–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: –≤–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.'
                           ' –í–æ–∑–º–æ–∂–Ω–æ, –í—ã –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ –ø–æ–∏—Å–∫–∞.')
        bot.register_next_step_handler(msg, city_search_choice_step_remark)
        return
    else:
        search_city_eng = regions_cities_dict.get(user.search_region)[2].get(user_search_city_rus)[0]
        user.search_city_eng = search_city_eng
        user.search_city_rus = user_search_city_rus
        user.search_city_lit = regions_cities_dict.get(user.search_region)[2].get(user_search_city_rus)[1]

        if user.model_choice is None:
            query = '{}.drom.ru/{}/'.format(user.search_city_eng, user.brand_choice)
        else:
            query = '{}.drom.ru/{}/{}/'.format(user.search_city_eng, user.brand_choice, user.model_choice)

        user.query = query
        bot.send_message(message.chat.id,
                         '–•–æ—Ä–æ—à–æ, –æ—Å—É—â–µ—Å—Ç–≤–∏–º –ø–æ–∏—Å–∫ –∞–≤—Ç–æ –≤ –¥–∞–Ω–Ω–æ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω—Ç–∫–µ')

        bot.send_message(message.chat.id,
                         f'''
                         <b>–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
                         \n---------------------------------------
                         \n<b>–î–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω:</b> {user.home_region_lit}. \n<b>–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:</b> {user.search_region_lit}. \n<b>–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.search_city_rus is None else user.search_city_lit}.\n<b>–ú–∞—Ä–∫–∞:</b> {user.brand_choice_lit}. \n<b>–ú–æ–¥–µ–ª—å:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.model_choice is None else user.model_choice_lit}.
                         ''',
                         parse_mode='html')

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–î–∞', '–ù–µ—Ç')
        msg = bot.send_message(message.chat.id, '–í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?', reply_markup=markup)
        bot.register_next_step_handler(msg, make_query_step)


def brand_choice_step_remark(message):
    brand_choice = message.text.lower().strip()

    if brand_choice == '/start':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å')
        send_welcome(message)

    elif brand_choice == '/help':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_help(message)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏')
        bot.register_next_step_handler(msg, brand_choice_step_remark)

    elif brand_choice == '/info':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_info(message)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏')
        bot.register_next_step_handler(msg, brand_choice_step_remark)

    elif brands_models_dict.get(brand_choice) is None:
        msg = bot.reply_to(message,
                           '–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: –≤–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
        bot.register_next_step_handler(msg, brand_choice_step_remark)
        return
    else:
        bot.reply_to(message, '–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—É—é –º–∞—Ä–∫—É –∞–≤—Ç–æ –≤ –∏–º–µ—é—â–µ–º—Å—è —É –º–µ–Ω—è —Å–ø–∏—Å–∫–µ.')

        chat_id = message.chat.id
        user = user_dict[chat_id]

        user.brand_choice = brands_models_dict.get(brand_choice)[0]
        user.brand_choice_lit = brands_models_dict.get(brand_choice)[1]

        if user.search_city_eng is None:
            query = 'auto.drom.ru/region{}/{}/'.format(user.search_region_num, user.brand_choice)
        else:
            query = '{}.drom.ru/{}/'.format(user.search_city_eng, user.brand_choice)

        user.query = query

        if user.model_choice is None:

            bot.send_message(message.chat.id,
                             f'''
                             <b>–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
                             \n---------------------------------------
                             \n<b>–î–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω:</b> {user.home_region_lit}. \n<b>–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:</b> {user.search_region_lit}. \n<b>–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.search_city_rus is None else user.search_city_lit}.\n<b>–ú–∞—Ä–∫–∞:</b> {user.brand_choice_lit}. \n<b>–ú–æ–¥–µ–ª—å:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.model_choice is None else user.model_choice_lit}.
                             ''',
                             parse_mode='html')

            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
            markup.add('–î–∞', '–ù–µ—Ç')
            msg = bot.send_message(message.chat.id, '–í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?', reply_markup=markup)
            bot.register_next_step_handler(msg, make_query_step)

        else:

            bot.send_message(message.chat.id, '–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –º–∞—Ä–∫—É –∞–≤—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞, '
                                              '–ø–æ—ç—Ç–æ–º—É —Å–µ–π—á–∞—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å.')

            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏')
            bot.register_next_step_handler(msg, model_choice_step_remark)


def model_choice_step_remark(message):
    model_choice = message.text.lower().strip()

    chat_id = message.chat.id
    user = user_dict[chat_id]

    if model_choice == '/start':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å')
        send_welcome(message)

    elif model_choice == '/help':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_help(message)
        msg = bot.send_message(message.chat.id,
                               '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –º–æ–µ–¥–ª—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–∞–Ω–µ–µ –±—Ä–µ–Ω–¥—É!')
        bot.register_next_step_handler(msg, model_choice_step_remark)

    elif model_choice == '/info':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ')
        send_info(message)
        msg = bot.send_message(message.chat.id,
                               '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –º–æ–µ–¥–ª—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–∞–Ω–µ–µ –±—Ä–µ–Ω–¥—É!')
        bot.register_next_step_handler(msg, model_choice_step_remark)

    elif brands_models_dict.get(user.brand_choice)[2].get(model_choice) is None:
        msg = bot.reply_to(message,
                           '–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: –≤–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
        bot.register_next_step_handler(msg, model_choice_step_remark)
        return
    else:
        bot.reply_to(message, '–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∞–≤—Ç–æ –≤ –∏–º–µ—é—â–µ–º—Å—è —É –º–µ–Ω—è —Å–ø–∏—Å–∫–µ.')

        user.model_choice = brands_models_dict.get(user.brand_choice)[2].get(model_choice)[0]
        user.model_choice_lit = brands_models_dict.get(user.brand_choice)[2].get(model_choice)[1]

        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –æ—Å—É—â–µ—Å—Ç–≤–∏–º –ø–æ–∏—Å–∫ –ø–æ –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏')

        if user.search_city_eng is None:
            query = 'auto.drom.ru/region{}/{}/{}/'.format(user.search_region_num, user.brand_choice, user.model_choice)
        else:
            query = '{}.drom.ru/{}/{}/'.format(user.search_city_eng, user.brand_choice, user.model_choice)

        user.query = query

    bot.send_message(message.chat.id,
                     f'''
                     <b>–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
                     \n---------------------------------------
                     \n<b>–î–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω:</b> {user.home_region_lit}. \n<b>–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:</b> {user.search_region_lit}. \n<b>–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.search_city_rus is None else user.search_city_lit}.\n<b>–ú–∞—Ä–∫–∞:</b> {user.brand_choice_lit}. \n<b>–ú–æ–¥–µ–ª—å:</b> {'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if user.model_choice is None else user.model_choice_lit}.
                     ''', parse_mode='html')

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('–î–∞', '–ù–µ—Ç')
    msg = bot.send_message(message.chat.id, '–í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?', reply_markup=markup)
    bot.register_next_step_handler(msg, make_query_step)


@bot.message_handler(func=lambda message: message.text.strip().lower() == '/posters')  # commands=["posters"]
def posters_step(message):
    chat_id = message.chat.id

    if user_dict.get(chat_id) is None:
        bot.send_message(message.chat.id, '–í—ã –µ—â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è.')
    else:
        user = user_dict[chat_id]
        if user.query_status == 1:
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
            markup.add('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17',
                       '18', '19', '20')
            msg = bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', reply_markup=markup)
            bot.register_next_step_handler(msg, posters_step_2)
        else:
            bot.send_message(message.chat.id,
                             '–í—ã –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ /dialog, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.')


def posters_step_2(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    limit_choice = message.text.lower().strip()

    if limit_choice == '/start':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å', reply_markup=types.ReplyKeyboardRemove())
        send_welcome(message)

    elif limit_choice == '/help':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ', reply_markup=types.ReplyKeyboardRemove())
        send_help(message)
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18',
                   '19', '20')
        msg = bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(msg, posters_step_2)

    elif limit_choice == '/info':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–µ—Ä–≤–µ–º—Å—è –Ω–µ–Ω–∞–¥–æ–ª–≥–æ', reply_markup=types.ReplyKeyboardRemove())
        send_info(message)
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18',
                   '19', '20')
        msg = bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(msg, posters_step_2)

    elif limit_choice not in ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16',
                              '17', '18', '19', '20']:
        bot.reply_to(message,
                     '–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.',
                     reply_markup=types.ReplyKeyboardRemove())
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18',
                   '19', '20')
        msg = bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(msg, posters_step_2)
    else:
        user.limit = int(limit_choice)

        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ –ø–æ–∏—Å–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
                         reply_markup=types.ReplyKeyboardRemove())

        get_posters(message, query=user.query, home_reg=user.home_region_num, limit=user.limit, chat_id=chat_id,
                    query_count=user.query_count)

        try:
            df = pd.read_csv(
                f"C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\user_data\\query_results\\{chat_id}\\query_result__{user.query_count}__{user.query.replace('/', '').replace(':', '')}.csv",
                delimiter=',')

            df = df.replace({'EV': {'No': '–ù–µ—Ç', 'Yes': '–î–∞'}, 'mileage_rus': {'No': '–ù–µ—Ç', 'Yes': '–î–∞'},
                             'hybrid': {'No': '–ù–µ—Ç', 'Yes': '–î–∞'}, 'gas_system': {'No': '–ù–µ—Ç', 'Yes': '–î–∞'},
                             'broken': {'No': '–ù–µ—Ç', 'Yes': '–î–∞'}, 'no_doc': {'No': '–ù–µ—Ç', 'Yes': '–î–∞'},
                             '—Åhassis_config': {'–ø–µ—Ä–µ–¥–Ω–∏–π': '–ü–µ—Ä–µ–¥–Ω–∏–π', '–∑–∞–¥–Ω–∏–π': '–ó–∞–¥–Ω–∏–π'},
                             'salesman': {'not official dealer': '–ù–æ–≤—ã–π –æ—Ç –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–∏–ª–µ—Ä–∞',
                                          'official dealer': '–ù–æ–≤—ã–π –æ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–∏–ª–µ—Ä–∞',
                                          'owner': '–û—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞'}})
            for i in range(df.shape[0]):

                if str(df.iloc[i]['photo_url']) == 'nan':
                    photo_url = open('C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\photo\\default_photo.png', 'rb')
                else:
                    photo_url = df.iloc[i]['photo_url']

                info = f'''
    <b>–ú–∞—Ä–∫–∞:</b> {df.iloc[i]['brand']}
    <b>–ú–æ–¥–µ–ª—å:</b> {df.iloc[i]['model']}
    <b>–ì–æ–¥:</b> {df.iloc[i]['year']}
    <b>–¶–≤–µ—Ç:</b> {'–ù–µ —É–∫–∞–∑–∞–Ω' if str(df.iloc[i]['color']) == 'nan' else df.iloc[i]['color'].title()}
    <b>–ü–æ–∫–æ–ª–µ–Ω–∏–µ:</b> {'–ù–µ —É–∫–∞–∑–∞–Ω–æ' if str(df.iloc[i]['generation']) == 'nan' else df.iloc[i]['generation']}
    <b>–†–µ—Å—Ç–∞–π–ª–∏–Ω–≥:</b> {'–ù–µ —É–∫–∞–∑–∞–Ω' if str(df.iloc[i]['restyling']) == 'nan' else df.iloc[i]['restyling']}
    <b>–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:</b> {'–ù–µ —É–∫–∞–∑–∞–Ω–∞' if str(df.iloc[i]['configuration']) == 'nan' else df.iloc[i]['configuration'].title()}
    <b>–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª):</b> {'–ù–µ —É–∫–∞–∑–∞–Ω' if str(df.iloc[i]['engine_volume (liters)']) == 'nan' else df.iloc[i]['engine_volume (liters)']}
    <b>–ú–æ—â–Ω–æ—Å—Ç—å (–ª.—Å):</b> {'–ù–µ —É–∫–∞–∑–∞–Ω–∞' if str(df.iloc[i]['hp']) == 'nan' else df.iloc[i]['hp']}
    <b>–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞:</b> {'–ù–µ —É–∫–∞–∑–∞–Ω' if str(df.iloc[i]['fuel_type']) == 'nan' else df.iloc[i]['fuel_type'].title()}
    <b>–¢–∏–ø –ö–ü–ü:</b> {'–ù–µ —É–∫–∞–∑–∞–Ω' if str(df.iloc[i]['gear_type']) == 'nan' else df.iloc[i]['gear_type']}
    <b>–ü—Ä–∏–≤–æ–¥:</b> {'–ù–µ —É–∫–∞–∑–∞–Ω' if str(df.iloc[i]['—Åhassis_config']) == 'nan' else df.iloc[i]['—Åhassis_config']}
    <b>–ü—Ä–æ–±–µ–≥, –∫–º:</b> {'–ù–µ —É–∫–∞–∑–∞–Ω' if str(df.iloc[i]['mileage (km)']) == 'nan' else df.iloc[i]['mileage (km)']}
    <b>–ë–µ–∑ –ø—Ä–æ–±–µ–≥–∞ –ø–æ –†–§:</b> {'–ù–µ —É–∫–∞–∑–∞–Ω' if str(df.iloc[i]['mileage_rus']) == 'nan' else df.iloc[i]['mileage_rus']}
    <b>–≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å:</b> {'–ù–µ —É–∫–∞–∑–∞–Ω–æ' if str(df.iloc[i]['EV']) == 'nan' else df.iloc[i]['EV']}
    <b>–ì–∏–±—Ä–∏–¥:</b> {'–ù–µ —É–∫–∞–∑–∞–Ω–æ' if str(df.iloc[i]['hybrid']) == 'nan' else df.iloc[i]['hybrid']}
    <b>–ì–ë–û:</b> {'–ù–µ —É–∫–∞–∑–∞–Ω–æ' if str(df.iloc[i]['gas_system']) == 'nan' else df.iloc[i]['gas_system']}
    <b>–†—É–ª—å:</b> {'–ù–µ —É–∫–∞–∑–∞–Ω' if str(df.iloc[i]['steering_wheel']) == 'nan' else df.iloc[i]['steering_wheel'].title()}
    <b>–¢–∏–ø –∫—É–∑–æ–≤–∞:</b> {'–ù–µ —É–∫–∞–∑–∞–Ω' if str(df.iloc[i]['body_type']) == 'nan' else df.iloc[i]['body_type'].title()}
    <b>–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è / –ø–æ–ª–æ–º–∫–∏:</b> {'–ù–µ —É–∫–∞–∑–∞–Ω–æ' if str(df.iloc[i]['broken']) == 'nan' else df.iloc[i]['broken']}
    <b>–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:</b> {'–ù–µ —É–∫–∞–∑–∞–Ω–æ' if str(df.iloc[i]['no_doc']) == 'nan' else df.iloc[i]['no_doc']}
    <b>–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ:</b> {'–ù–µ —É–∫–∞–∑–∞–Ω–æ' if str(df.iloc[i]['location']) == 'nan' else df.iloc[i]['location']}
    <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {'–ù–µ —É–∫–∞–∑–∞–Ω' if str(df.iloc[i]['salesman']) == 'nan' else df.iloc[i]['salesman']}
    <b>–¶–µ–Ω–∞ (—Ä—É–±):</b> {df.iloc[i]['price (rub)']}
    <b>–ù–∞–ª–æ–≥ (—Ä—É–±):</b> {'–ù–µ —É–∫–∞–∑–∞–Ω' if str(df.iloc[i]['tax (rub)']) == 'nan' else df.iloc[i]['tax (rub)']}
            '''

                query_hash_dict[hashlib.md5(
                    f"price_changing__{user.query_count}__{user.query.replace('/', '').replace(':', '')}__{i}".encode(
                        'utf-8')).hexdigest()] = f"price_changing__{user.query_count}__{user.query.replace('/', '').replace(':', '')}__{i}"

                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', url=df.iloc[i]['URL'])
                button2 = types.InlineKeyboardButton('–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã',
                                                     callback_data=hashlib.md5(
                                                         f"price_changing__{user.query_count}__{user.query.replace('/', '').replace(':', '')}__{i}".encode(
                                                             'utf-8')).hexdigest())

                markup.row(button1)
                markup.row(button2)

                np.save(f'C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\user_data\\dictionaries\\query_hash_dict.npy',
                        query_hash_dict)

                bot.send_photo(message.chat.id, photo=photo_url, caption=info, reply_markup=markup, parse_mode='html')

            brief = df[['year', 'mileage (km)', 'price (rub)', 'tax (rub)']].describe().loc[
                ['min', 'mean', 'max']].set_index(
                pd.Series(['–ú–∏–Ω–∏–º—É–º', '–°—Ä–µ–¥–Ω–µ–µ', '–ú–∞–∫—Å–∏–º—É–º']))
            brief = brief.rename(
                columns={'year': "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", 'mileage (km)': "–ü—Ä–æ–±–µ–≥ (–∫–º)", 'price (rub)': "–¶–µ–Ω–∞ (—Ä—É–±)",
                         'tax (rub)': "–ù–∞–ª–æ–≥ (—Ä—É–±)"})
            for i in brief.columns:
                brief[i] = brief[i].apply(lambda x: int(np.floor(x)))

            os.makedirs(f'C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\user_data\\photo\\{chat_id}',
                        exist_ok=True)

            dfi.export(brief,
                       f'C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\user_data\\photo\\{chat_id}\\brief_info.png')

            bot.send_photo(message.chat.id, photo=open(
                f'C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\user_data\\photo\\{chat_id}\\brief_info.png', 'rb'),
                           caption='<b>–°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É</b>', parse_mode='html')

            user.last_queries.append(user.query)
            user.query_count = user.last_queries.count(user.query)
            np.save(f'C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\user_data\\dictionaries\\user_dict.npy',
                    user_dict)

        except:
            bot.send_message(message.chat.id,
                             '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ —Å–º–æ–≥ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å: /dialog.')


@bot.callback_query_handler(func=lambda call: True)
def handle(call):
    hash_call_data = query_hash_dict.get(call.data)

    if 'price_changing' in hash_call_data:
        query_count = hash_call_data.split('__')[-3]
        query_result = hash_call_data.split('__')[-2]

        df = pd.read_csv(
            f'C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\user_data\\query_results\\{call.message.chat.id}\\query_result__{query_count}__{query_result}.csv',
            delimiter=',')
        df = df.replace({'EV': {'No': '–ù–µ—Ç', 'Yes': '–î–∞'}, 'mileage_rus': {'No': '–ù–µ—Ç', 'Yes': '–î–∞'},
                         'hybrid': {'No': '–ù–µ—Ç', 'Yes': '–î–∞'}, 'gas_system': {'No': '–ù–µ—Ç', 'Yes': '–î–∞'},
                         'broken': {'No': '–ù–µ—Ç', 'Yes': '–î–∞'}, 'no_doc': {'No': '–ù–µ—Ç', 'Yes': '–î–∞'},
                         '—Åhassis_config': {'–ø–µ—Ä–µ–¥–Ω–∏–π': '–ü–µ—Ä–µ–¥–Ω–∏–π', '–∑–∞–¥–Ω–∏–π': '–ó–∞–¥–Ω–∏–π'},
                         'salesman': {'not official dealer': '–ù–æ–≤—ã–π –æ—Ç –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–∏–ª–µ—Ä–∞',
                                      'official dealer': '–ù–æ–≤—ã–π –æ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–∏–ª–µ—Ä–∞',
                                      'owner': '–û—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞'}})

        i = int(hash_call_data.split('__')[-1])

        driver.get('https://auto-history.info')

        search_string = WebDriverWait(driver, 30).until(
            EC.element_to_be_clickable((By.XPATH, "/html/body/div[1]/nav/div/div[2]/form[2]/div/div/input")))

        url = df.iloc[i]['URL']
        search_string.click()
        search_string.send_keys(url)

        search_go = driver.find_element('xpath', '/html/body/div[1]/nav/div/div[2]/form[2]/div/div/span/button')
        search_go.click()

        history_info = BeautifulSoup(driver.page_source, 'html.parser')

        try:

            string = history_info.find_all('div', {'class': 'col-xs-12'})[3].find('p').get_text()

            date_price_list = re.findall(r'[\d.]+ - [\d\s]+', string)

            dates = []
            prices = []

            for j in date_price_list:
                dates.append(j.split(' - ')[0])
                prices.append(int(j.split(' - ')[1].replace(' ', '')))

            matplotlib.use("Agg")

            fig, ax = plt.subplots(1, 1, figsize=(15, 15))
            ax.plot(dates, prices, color='red', marker='o', linestyle='dotted', linewidth=2, markersize=8)
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.set_xlabel('–î–∞—Ç–∞', fontsize=22, va='bottom', loc="center", labelpad=30)
            ax.set_ylabel('–¶–µ–Ω–∞ (—Ä—É–±)', fontsize=22, rotation=90, ha='right')
            ax.set_title('–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –Ω–∞ –¥–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å', fontsize=22, va='bottom')
            plt.xticks(fontsize=15, rotation=60)
            plt.yticks(fontsize=15)
            ax.grid(True)
            plt.autoscale(enable=False, axis='y')
            ax.locator_params(axis='y', integer=True)

            formatter = ticker.ScalarFormatter()
            formatter.set_scientific(False)
            ax.yaxis.set_major_formatter(formatter)

            os.makedirs(f'C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\user_data\\photo\\{call.message.chat.id}',
                        exist_ok=True)
            fig.savefig(
                f'C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\user_data\\photo\\{call.message.chat.id}\\price_change_plot.png')

            bot.edit_message_media(message_id=call.message.message_id, chat_id=call.message.chat.id,
                                   media=types.InputMediaPhoto(open(
                                       f'C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\user_data\\photo\\{call.message.chat.id}\\price_change_plot.png',
                                       'rb')))
        except:
            bot.edit_message_media(message_id=call.message.message_id, chat_id=call.message.chat.id,
                                   media=types.InputMediaPhoto(
                                       open('C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\photo\\no_database.png',
                                            'rb')))

        query_hash_dict[hashlib.md5(
            f"photo_back__{query_count}__{query_result}__{i}".encode(
                'utf-8')).hexdigest()] = f"photo_back__{query_count}__{query_result}__{i}"

        markup1 = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', url=df.iloc[i]['URL'])
        button2 = types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ',
                                             callback_data=hashlib.md5(
                                                 f"photo_back__{query_count}__{query_result}__{i}".encode(
                                                     'utf-8')).hexdigest())

        markup1.row(button1)
        markup1.row(button2)

        np.save(f'C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\user_data\\dictionaries\\query_hash_dict.npy',
                query_hash_dict)

        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=call.message.caption,
                                 parse_mode='html', reply_markup=markup1)
        bot.answer_callback_query(call.id)

    if 'photo_back' in hash_call_data:
        query_count = hash_call_data.split('__')[-3]
        query_result = hash_call_data.split('__')[-2]

        df = pd.read_csv(
            f'C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\user_data\\query_results\\{call.message.chat.id}\\query_result__{query_count}__{query_result}.csv',
            delimiter=',')
        df = df.replace({'EV': {'No': '–ù–µ—Ç', 'Yes': '–î–∞'}, 'mileage_rus': {'No': '–ù–µ—Ç', 'Yes': '–î–∞'},
                         'hybrid': {'No': '–ù–µ—Ç', 'Yes': '–î–∞'}, 'gas_system': {'No': '–ù–µ—Ç', 'Yes': '–î–∞'},
                         'broken': {'No': '–ù–µ—Ç', 'Yes': '–î–∞'}, 'no_doc': {'No': '–ù–µ—Ç', 'Yes': '–î–∞'},
                         '—Åhassis_config': {'–ø–µ—Ä–µ–¥–Ω–∏–π': '–ü–µ—Ä–µ–¥–Ω–∏–π', '–∑–∞–¥–Ω–∏–π': '–ó–∞–¥–Ω–∏–π'},
                         'salesman': {'not official dealer': '–ù–æ–≤—ã–π –æ—Ç –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–∏–ª–µ—Ä–∞',
                                      'official dealer': '–ù–æ–≤—ã–π –æ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–∏–ª–µ—Ä–∞',
                                      'owner': '–û—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞'}})

        i = int(hash_call_data.split('__')[-1])

        if str(df.iloc[i]['photo_url']) == 'nan':
            photo_url = open('C:\\Users\\zhmax\\PycharmProjects\\Drom_bot\\photo\\default_photo.png', 'rb')
        else:
            photo_url = df.iloc[i]['photo_url']

        bot.edit_message_media(message_id=call.message.message_id, chat_id=call.message.chat.id,
                               media=types.InputMediaPhoto(photo_url))

        markup2 = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', url=df.iloc[i]['URL'])
        button2 = types.InlineKeyboardButton('–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã',
                                             callback_data=hashlib.md5(
                                                 f"price_changing__{query_count}__{query_result}__{i}".encode(
                                                     'utf-8')).hexdigest())

        markup2.row(button1)
        markup2.row(button2)

        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=call.message.caption,
                                 parse_mode='html', reply_markup=markup2)
        bot.answer_callback_query(call.id)


bot.infinity_polling()
